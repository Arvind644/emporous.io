<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UOR Framework – docs</title>
    <link>/tags/docs/</link>
    <description>Recent content in docs on UOR Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/tags/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Getting Started</title>
      <link>/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/quick-start/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_universal_object_reference&#34;&gt;Universal Object Reference&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;magical commands&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;literalblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;asdf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FAQ</title>
      <link>/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/faq/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_universal_object_reference_faq&#34;&gt;Universal Object Reference FAQ&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_what_is_uor&#34;&gt;What is UOR?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Universal Object Reference (UOR) provides a single format to publish, retrieve, and interact with any content. By “any content” we mean literally anything.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_ok_so_what_can_uor_be_used_for&#34;&gt;Ok, so, what can UOR be used for?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Didn’t we say anything? A few examples of how UOR can be used are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File Management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hosting static or dynamic web content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Labeling and Dataset management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI model management - &lt;a href=&#34;https://asciinema.org/a/wWCR7VY0zC97m3ibd3mKXcsJL&#34; class=&#34;bare&#34;&gt;https://asciinema.org/a/wWCR7VY0zC97m3ibd3mKXcsJL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a relational database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an object-relational database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure provisioning and management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage provider&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D modeling and simulation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Secure supply chain management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git provider&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container image management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identity management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message broker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Literally anything… You tell us.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_wow_just_that_list_is_a_lot_and_how_does_uor_accomplish_such_flexibility&#34;&gt;Wow, just that list is a lot. And how does UOR accomplish such flexibility?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;UOR has 4 principles that enable truly universal support for any and all content. Those are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;All content is formatted into a Directed Acyclic Graph (DAG)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All content is a dataset - Every item within a collection of content is labeled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All links to and references to content within a collection of content are performed by an addressing scheme referred to as “Attribute Addressing”. This means that a link or reference to content within a collection is made by referring to that content’s data labels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time, space, and events must be represented in order to provide truly universal capability. Time and space (state), are represented through content labels. Event representation is performed by executing embedded algorithms stored within each collection of content.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_did_you_just_say_time_space_and_events&#34;&gt;Did you just say “time, space, and events”?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Yes, UOR is based on a theory called Object Oriented Ontology. You can learn more about it here: &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_ontology&#34; class=&#34;bare&#34;&gt;https://en.wikipedia.org/wiki/Object-oriented_ontology&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_why_would_you_want_to_link_something_like_web_pages_or_any_content_via_attributes&#34;&gt;Why would you want to link something like web pages or any content via attributes?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This might seem arbitrary at first glance, but it is a fundamental concept in human cognition. We describe a table to another person via its attributes i.e. Dark wood, 18x2in rectangular legs, round top…​ If we’ve been precise enough in our description, another person would be able to pick that table out of a showroom of tables. UOR takes this concept and applies it to everything. We can then train AI models on a uniformly formatted internet containing contextually linked data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_whats_this_about_embedded_algorithms&#34;&gt;What’s this about embedded algorithms?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;UOR provides a simple way to embed application logic into collections of content. These embedded algorithms are called Universal Runtime Objects (UROs). There are several benefits from this approach such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Version locked compatibility between application and content.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enables UOR to be used as a serverless framework&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enables 6G technologies: &lt;a href=&#34;https://www.mdpi.com/2504-2289/5/4/56/htm&#34; class=&#34;bare&#34;&gt;https://www.mdpi.com/2504-2289/5/4/56/htm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When combined with attributes, can be used to express non-tangible concepts (to AI).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides a decentralization framework&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_ive_seen_the_word_attribution_used_in_uor_what_does_that_mean_to_uor&#34;&gt;I’ve seen the word “Attribution” used in UOR. What does that mean to UOR?&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Attribution in UOR is a powerful concept. Since anything can be uniformly expressed with UOR, we can more easily analyze the relationships between elements within an information system and derive intelligence about how those things act upon and influence each other. Those insights become deeper as more elements within an information system are formatted with UOR.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Example Use-Cases</title>
      <link>/docs/example-use-cases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/example-use-cases/</guid>
      <description>
        
        
        &lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_uor_example_use_cases&#34;&gt;UOR Example Use-Cases&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_file_management&#34;&gt;File Management:&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;UOR can be used to store and retrieve any arbitrary files. The files can be retrieved by name (since name is just an attribute) or the files can be retrieved by referencing their other attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_for_example&#34;&gt;For example:&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A user stores files within a UOR collection and queries the UOR collection for a file called “fish.jpeg”. The user then wants to discover all configuration files held within the UOR collection, so they query the UOR collection for all configuration files. The user can further specify the configuration file(s) for a specific application within their query.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_labeling_and_dataset_management&#34;&gt;Labeling and Dataset Management:&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Similar to the example above, UOR can be used to label, store, and retrieve datasets used in MLOps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_for_example_2&#34;&gt;For example:&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A dataset containing images with COCO (&lt;a href=&#34;https://cocodataset.org/#format-data&#34; class=&#34;bare&#34;&gt;https://cocodataset.org/#format-data&lt;/a&gt;) annotations applied can be stored as a UOR collection and subsets of the dataset can be retrieved by referencing any individual or collection of COCO annotation(s).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_websitesweb_apps&#34;&gt;Websites/web apps:&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Universal Runtime Objects (UROs) make UOR an inherently serverless framework. In the case of websites/web apps, a lightweight web/app server is embedded with UOR formatted web content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_for_example_3&#34;&gt;For example:&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A user browses to a UOR formatted website, the web browser executes the lightweight web or application server which contains the logic to serve the corresponding content. Is then served to the browser engine where it is rendered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The web/app server can be reused/shared between UOR collections containing websites.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_infrastructure_provisioning&#34;&gt;Infrastructure Provisioning&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A cloud infrastructure configuration can be stored within a UOR collection along with a utility used to process that configuration. When the utility makes actions based upon the associated config, it can write its state information back to the original collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect3&#34;&gt;
&lt;h4 id=&#34;_for_example_4&#34;&gt;For example:&lt;/h4&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A user retrieves a UOR collection containing a Terraform configuration. The Terraform binary is embedded in that collection. The terraform binary is executed against the referenced configuration and after processing, the tfstate is written back to the collection.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
  </channel>
</rss>
